{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Hi everyone! If you're new to the aiogram library and find yourself getting confused often, you've come to the right place.</p> <p>I've been trying to gather and structure some of the most frequently asked questions and common problems you might encounter, along with their solutions.</p> <p>Note</p> <p>Please note that this article is not an official publication. It was written by an aiogram enthusiast, who is not affiliated with the creator of Aiogram.</p> <p>Feel free to explore the sections below to find answers to your questions. And if you can't find what you're looking for or have suggestions for improving this FAQ, don't hesitate to reach out.</p> <p>Thanks for your github stars!</p>"},{"location":"common_errors/","title":"Common errors","text":""},{"location":"common_errors/#migration-related-errors","title":"Migration related errors","text":"<p>Aiogram has recently had a major version update, so a lot of tutorials on the web are outdated now.</p> <pre><code>Traceback (most recent call last):\n  File \"/root/bot_update/main.py\", line 1, in &lt;module&gt;\n    from aiogram.utils import executor\nImportError: cannot import name 'executor' from 'aiogram.utils' (/usr/local/lib/python3.10/dist-packages/aiogram/utils/__init__.py)\n</code></pre> <p>This is the most popular example. Previously, aiogram used <code>executor</code> to manage all of the execution proccesses. However, in aiogram 3.x, it's integrated into the dispatcher. As a result, even the simplest 2.x example wouldn't work on aiogram 3.x.</p> <p></p> <ol> <li>Drop your outdated tutorial. If you are just learning aiogram you shouldn't start with unsupported versions.</li> <li>Make your first steps into aiogram 3.</li> </ol> <p>Another option</p> <p>Yes, you can downgrade your aiogram to 2.x via <code>pip install aiogram==2.25.2</code>, but do you really want to start learning the outdated and unsupported version?</p>"},{"location":"common_errors/#python-versions-related-errors","title":"Python versions related errors","text":""},{"location":"common_errors/#invalid-syntax","title":"Invalid syntax","text":"<pre><code>File \"main.py\", line 15\n  async def start(message: Message):\n      ^\nSyntaxError: invalid syntax\n</code></pre> <p>You use python &lt; 3.8. You can check supported versions at PyPi and upgrade.</p> <pre><code>File \"/home/user/bot/main.py\", line 30    \n  match unit:\n      ^\nSyntaxError: invalid syntax\n</code></pre> <p>You've probably tested in on your local machine and everything was alright, but when you moved to VPS this problem occured.</p> <p>Check your python version. The match case was intoduced in python 3.10.</p>"},{"location":"common_errors/#wheels-for-aiohttp","title":"Wheels for aiohttp","text":"<pre><code>  note: This error originates from a subprocess, and is likely not a problem with pip.\n  ERROR: Failed building wheel for aiohttp\nFailed to build aiohttp\nERROR: Could not build wheels for aiohttp, which is required to install pyproject.toml-based projects\n</code></pre> <p>Chances are that you are using python 3.12 with an older version of aiogram.</p> <p>Solution: you can either install python 3.11 or the most recent aiogram.</p>"},{"location":"common_errors/#deprecation-warning","title":"Deprecation Warning","text":"<pre><code>TypeError: Passing `parse_mode`, `disable_web_page_preview` or `protect_content` to Bot initializer is not supported anymore. These arguments have been removed in 3.7.0 version. Use `default=DefaultBotProperties(parse_mode=&lt;ParseMode.HTML: 'HTML'&gt;)` argument instead.\n</code></pre> <p>You've probably tried to use <code>parse_mode=ParseMode.HTML</code> directly while creating a bot instance. While it was possible in older versions, now you should use default bot properties.</p> <p>or if you don't use the newest version of aiogram you could have got a warning like that:</p> <pre><code>DeprecationWarning: Passing parse_mode, disable_web_page_preview or protect_content to Bot initializer is deprecated. This arguments will be removed in 3.7.0 version\nUse default=DefaultBotProperties(...) instead.\n  bot = Bot(TOKEN, parse_mode=ParseMode.HTML)\n</code></pre> <p>You've probably tried to use <code>parse_mode=ParseMode.HTML</code> directly in a <code>send_message</code> or <code>answer</code> method.</p> <p>No matter which version you are using, if you encounter either the error or the warning, you should start using the default bot properties from now on.</p> <pre><code>from aiogram.client.default import DefaultBotProperties\nfrom aiogram.enums import ParseMode\n...\n\nbot = Bot(\n  token=BOT_TOKEN,\n  default=DefaultBotProperties(parse_mode=ParseMode.HTML),\n    )\n</code></pre> <p>DefaultBotProperties contains more properties than just a parse mode, including:</p> <pre><code>- parse_mode\n- disable_notification\n- protect_content\n- allow_sending_without_reply\n- link_preview\n- link_preview_is_disabled\n- link_preview_prefer_small_media\n- link_preview_prefer_large_media\n- link_preview_show_above_text\n</code></pre> <p>You still can use <code>parse_mode=ParseMode.&lt;your_parsemode&gt;</code> somewhere in your code directly if it differs from your default one.</p>"},{"location":"common_errors/#bad-request-cant-parse-entities","title":"Bad Request: can't parse entities","text":"<p>If you have no idea what that formatting means..</p> <p>Check out infomation about text formatting in aiogram.</p> <p>If you are getting the following error:</p> <pre><code>exception=TelegramBadRequest('Telegram server says - Bad Request: can't parse entities: Unsupported start tag \"&lt;1;&lt;/code\" at byte offset 59')&gt;\n</code></pre> <p>chances are that your text contains special characters, that cannot be parsed (for example, \"&lt;\" or \"&gt;\" in html parse mode).</p> <p>If your code looks something like that <code>html.bold(your_text)</code> you should change it to <code>html.bold(html.unparse(your_text))</code>.</p> <p>There is another way</p> <p>You can use aiogram formatting classes directly instead of using the unparse method. In that case your code will look a bit different (arguably more complex).</p> <pre><code>from aiogram.utils.formatting import Bold\n\n@router.message(Command(\"bold\"))\nasync def bold_command(message: Message):\n    bold = Bold(your_text)\n    await message.answer(**bold.as_kwargs())\n</code></pre> <p><sub>example by Avazart</sub></p>"},{"location":"common_errors/#multiple-values-for-argument-bot","title":"Multiple values for argument 'bot'","text":"<p>Let's check out the easiest router example:</p> <pre><code>@router.message(Command(\"test\"))\nasync def test_handler(bot: Bot):\n    print(\"I'm in the test handler\")\n</code></pre> <p>Looks fine (at least at the first glance), but there is an error:</p> <pre><code>TypeError: test_handler() got multiple values for argument 'bot'\n</code></pre> <p>So, what's the problem? Positional argument.</p> <p>You must always take <code>message</code> as the first argument.</p> <pre><code>@router.message(Command(\"test\"))\nasync def test_handler(message: Message, bot: Bot):\n    print(\"I'm in the test handler\")\n</code></pre> <p>What if I don't need <code>message</code>, I just want to use <code>bot.&lt;something&gt;</code>? It doesn't matter. The first one must always be <code>message</code>.</p> <p>ChatGPT says to use <code>message.bot</code> if I don't want to have unused arguments, is it OK? Nope, it's not advised to use <code>&lt;event&gt;.bot</code> as it's can be not accessible.</p>"},{"location":"common_questions/","title":"Common Questions","text":""},{"location":"common_questions/#which-aiogram-version-should-i-use","title":"Which aiogram version should I use?","text":"<p>Aiogram 2.x is essentially outdated at this point. While it can still be used, it lacks support for the latest TelegramBotApi versions. Understanding Aiogram 2.x may be necessary to maintain older projects, but aside from that, there's little reason to begin learning it now. It's advisable to start with the most recent version.</p>"},{"location":"common_questions/#where-should-i-start-from","title":"Where should I start from?","text":"<p>Try the Simple Usage example from the documentation.</p>"},{"location":"common_questions/#can-my-bot-use-premium-emojis","title":"Can my bot use premium emojis?","text":"<p>Yes, but it requires buying a custom Fragment username for 1000 TON ($7.2k at the time of the acticle's last update).</p> <p></p>"},{"location":"common_questions/#can-two-of-my-bots-communicate","title":"Can two of my bots communicate?","text":"<p>Short answer is no.</p> <p>However, you can establish their communication through third-party software, as they cannot directly see each other's messages on Telegram.</p> <p>Another simple (but maybe not the most elegant way) is to create a junk-channel (it can be private) and handle channel posts. Both bots have to be admins in the channel.</p> <p>Bot A example:</p> <pre><code>@router.message(Command(\"send\"))\nasync def send_handler(message: Message, bot: Bot):\n    await bot.send_message(CHANNEL_ID, \"A message via [Bot A]\")\n</code></pre> <p>Bot B example:</p> <pre><code>@router.channel_post()\nasync def post_handler(channel_post: Message):\n    print(f\"[Bot B] got the messsage: {channel_post.text}\")\n</code></pre> <p>Output:</p> <pre><code>[Bot B] got the messsage: A message via [Bot A]\n</code></pre>"},{"location":"common_questions/#text-formatting","title":"Text formatting","text":"<p>There are different ways to format your text. You can either use plain markdown/html syntax in your messages, or use aiogram's in-built methods. I recommend the second option, because it is more reliable, as it unparses your strings before applying styles.</p> <p>You need to import the desired module using:</p> <pre><code>from aiogram import html\n</code></pre> <p>or</p> <pre><code>from aiogram import md\n</code></pre> <p>All of the methods available you can check here.</p> <p>Can I use HTML or Markdown directly? Yes, you can.</p> <p>Why do we have two Markdowns there and what should I use then? Because there is a legacy Markdown version without some of the available features. In most cases you will need to use MarkdownV2.</p> <p>HTML or Markdown? Sometimes Markdown acts weird with Telegram Bot API, so I would suggest choosing HTML if you don't have an urgent need to use Markdown.</p>"},{"location":"common_questions/#formatting-openai-output-for-bots","title":"Formatting OpenAI Output for Bots","text":"<p>If you are trying to convert OpenAI generated text you can check out chatgpt-md-converter by an active community member Latand.</p> <p>Installation:</p> <pre><code>pip install chatgpt-md-converter\n</code></pre> <p>Usage example from the Latand's tg channel:</p> <pre><code>from chatgpt_md_converter import telegram_format\n\nformatted_text = telegram_format(\"Here is some **bold**, __underline__, and `inline code`.\\n```python\\nprint('Hello, world!')\\n\")\n\nprint(formatted_text)\n</code></pre>"},{"location":"common_questions/#how-can-i-send-code-blocks-via-bot","title":"How can I send code blocks via bot?","text":"<p>If you use HTML parse mode:</p> <pre><code>await message.answer(html.pre_language(value=\"your_code\", language=\"language_name\"))\n</code></pre> <p>In case of working with Markdown:</p> <pre><code>await message.answer(md.pre_language(value=\"your_code\", language=\"language_name\"))\n</code></pre> <p>Output:</p> <p></p>"},{"location":"common_questions/#how-can-i-send-code-blocks-manually","title":"How can I send code blocks manually?","text":"<pre><code>    ```language_name\n    your_code = here\n    ```\n</code></pre> <p>Example input:</p> <pre><code>    ```python\n    async def on_startup(bot: Bot) -&gt; None:\n        await set_commands(bot)\n        await bot.set_webhook(\n            f\"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}\",\n            secret_token=WEBHOOK_SECRET,\n            allowed_updates=[\"message\", \"callback_query\"],\n        )\n    ```\n</code></pre> <p>Example output:</p> <p></p>"},{"location":"common_questions/#can-my-bot-handle-offline-messages","title":"Can my bot handle offline messages?","text":"<p>As the Telegram Bot API documentation states:</p> <p>There are two mutually exclusive ways of receiving updates for your bot - the getUpdates method on one hand and webhooks on the other. Incoming updates are stored on the server until the bot receives them either way, but they will not be kept longer than 24 hours.</p> <p>In case of working with polling you can call the <code>getUpdates()</code> (for example, use can add <code>await bot.get_updates()</code> in the startup function) method to retrieve all the missed messages.</p> <p>If you have a webhook - configure it while setting up:</p> <pre><code>await bot.set_webhook(..., drop_pending_updates=False)\n</code></pre>"},{"location":"common_questions/#can-my-bot-set-fsm-states-for-a-group","title":"Can my bot set FSM states for a group?","text":"<p>Yes, there are 5 types of FSM strategies. Dispatcher has a <code>fsm_strategy</code> parameter, which by default is set to <code>FSMStrategy.USER_IN_CHAT</code>. You can change it when creating your Dispatcher instance.</p> <pre><code>from aiogram.fsm.strategy import FSMStrategy\n\n...\n\ndp = Dispatcher(fsm_strategy=FSMStrategy.CHAT)\n</code></pre> <p>What if I want to have both private states and group states? You can use Storages to store any kind of custom states you want.</p>"},{"location":"common_questions/#how-can-i-handle-media-groupsalbums","title":"How can I handle media groups/albums?","text":"<p>Aiogram doesn't have in-built methods for it, but you can use aiogram_album utility by an active aiogram community member.</p>"},{"location":"common_questions/#how-to-filter-not-state","title":"How to filter \"not State\"?","text":"<p>There is an in-built aiogram state filter that you can use for that.</p> <pre><code>from aiogram.filters import StateFilter\n\n@router.message(~StateFilter(UserState))\n</code></pre> <p><sub>example by Stas</sub></p>"},{"location":"common_questions/#can-i-use-telegram-stars","title":"Can I use Telegram Stars?","text":"<p>Yes, aiogram fully supports Stars payments and you can check out an example from github.</p>"},{"location":"deeper_knowledge/","title":"Deeper Knowledge","text":"<p>If you have no problems with python and understanding examples from documentation, there is a chance that you are thinking about more complex projects. There are some useful things, that you might need.</p>"},{"location":"deeper_knowledge/#templates","title":"Templates","text":"<p>Here is one of the simplest structures for your first project. Most of the module names are self-explanatory. I would suggest putting configuration settings in the <code>utils</code> module, along with any additional helper files.</p> <pre><code>\u251c\u2500\u2500 bot/\n|   \u251c\u2500\u2500 filters/\n|   \u251c\u2500\u2500 handlers/\n|   \u251c\u2500\u2500 keyboards/\n|   \u251c\u2500\u2500 middlewares/\n|   \u2514\u2500\u2500 utils/\n|   .env\n\u2514\u2500\u2500 main.py\n</code></pre> <p>There are some more complex community templates available for you to explore.</p> <p><code>Latand/tgbot_template_v3</code> <code>wakaree/aiogram_bot_template</code> <code>andrew000/aiogram-template</code></p>"},{"location":"deeper_knowledge/#databases","title":"Databases","text":"<p>If you are planning to make somewhat complex bots you would most definitely use databases. There is also a CS50SQL course that teaches basic of SQL language. They mostly use SQLite to grasp the basics, but it's not recommended to use it with telegram bots (as any file database can be locked while working with async requests).</p> <p>Look into PostgreSQL with SQLAlchemy ORM and Alembic if you want an SQL database or into MongoDB for NoSQL one.</p>"},{"location":"deeper_knowledge/#apscheduler","title":"APScheduler","text":"<p>If you are planning to have scheduled or intervaled tasks you should look into APScheduler.</p> <p>Check out this part of Telegram Bot API FAQ before sending messages to all of your users</p>"},{"location":"deeper_knowledge/#redis","title":"Redis","text":"<p>There is a lot of data in bots' memory storage that could be lost after restarting. To prevent it you should use Redis.</p>"},{"location":"deeper_knowledge/#ngrok","title":"ngrok","text":"<p>If you are trying to localhost an aiogram bot using webhooks you definitely need to use ngrok to get the webhook link.</p>"},{"location":"deeper_knowledge/#i18n","title":"i18n","text":"<p>If you want to have several localizations and don't know how implement that - use aiogram i18n library.</p>"},{"location":"deeper_knowledge/#deploying","title":"Deploying","text":"<p>If you are ready to show off your bot you would need to host it somewhere. There are a lot of affordable hostings that you can choose from.</p> <p>My experience</p> <p>I have personally been using MVPS.net and have no complaints. However,  it's important to understand the basics of SSH protocol usage.</p> <p>To make the deployment as smooth as possible you'd better be familiar with Docker and Git (with, for example, GitHub).</p>"},{"location":"prior_knowledge/","title":"Prior Knowledge","text":""},{"location":"prior_knowledge/#why-doesnt-my-code-work","title":"Why doesn't my code work??","text":"<p>Many errors occur when people with no prior Python experience attempt to write their first project.</p> <pre><code>from aiogram import Bot\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nERROR!\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nModuleNotFoundError: No module named 'aiogram'\n</code></pre> <p>Aiogram is a highly specialized library that involves complex concepts, making it unsuitable for starting your Python journey.</p>"},{"location":"prior_knowledge/#what-do-i-absolutely-need-to-know","title":"What do I absolutely need to know?","text":"<ul> <li> - absolutely necessary</li> <li> - would be a great addition</li> </ul> <ul> <li> variables</li> <li> functions</li> <li> conditionals</li> <li> loops</li> <li> exceptions</li> <li> OOP</li> <li> testing</li> <li> venv</li> <li> decorators</li> <li> async</li> </ul> <p>Most of those topics are covered at CS50p course. It's absolutely free to take and has some great problem sets.</p> <p>You would at least need to get a basic understanding of testing, venv, decorators and async.</p>"},{"location":"prior_knowledge/#asking-questions","title":"Asking questions","text":"<p>You've taken a look at everything above, started working on your first bot and encoutered some difficulties that you can't deal with?</p> <p>Before asking for help, consider googling first, whether through search engines or the aiogram chat.</p> <p>Also, documentation has proved to be very helpful, don't forget to take a look!</p> <p>If you're convinced your issue is unique and hasn't been addressed before, please avoid meta in the chat.</p> <p>Choose an appropriate chat topic and provide a MRE along with your error traceback or an explanation of unwanted behaviour.</p> <p>Just a quick reminder</p> <p>Please remember to be polite to those who are assisting you. It's not advisable to send private messages asking about your errors or providing your entire code for review. Those people usually get tons of messages like that and simply have no time to answer them. Instead, communicate through the chat or consider purchasing a private consultation if available.</p>"}]}